프로그래밍 언어란? 프로그래밍 언어는 컴퓨터를 사용하여 특정 문제를 처리하기 위한 프로그램을 작성하기 위해 사용되는 언어입니다. 프로그래밍 언어는 일반적으로 저급 언어(기계어, 어셈블리어)와 고급 언어(컴파일러 언어)로 분류할 수 있습니다.

저급 언어

저급 언어(Low Level Language)는 기계어와 어셈블리어로 구분됩니다.

기계어

컴퓨터가 직접 이해할 수 있는 언어입니다.

0과 1의 2진수 형태로 표현하는 시간이 지수.

CPU에 내장된 컴퓨 터를 직접 사용하는 것으로, 프로그램을 작성하고 이해하기 쉽습니다.

기종마다 기계어가 다르 언어의 호환성은 없습니다.

조립어

기계어와 1:1로 대응하는 기호로 중간 언어로, 니모닉(Mnemonic) 언어를 선택해야 합니다.

하드웨어 제어에 주로 사용되며, 언어의 호환성이 없습니다.

컴퓨터가 직접 얻을 수 있는 추출 프로그램은 기계를 사용하여 어셈블러를 사용하시길 바랍니다.

고급 언어

고급 언어(고급 언어)는 싫어하는 언어로 간주되며, 인간의 실생활에서 사용하는 자연어와 유사한 및 구조를 가지고 있습니다.

하드웨어에 대한 깊은 지식이 없어도 프로그램 작성 및 수정이 가능합니다.

컴퓨터가 이해할 수 있는 기계는 입구에서 찾기 위해 찾기나 인터프리터를 사용합니다.

기계어와 어셈블리어를 포함하는 C, JAVA, Python등의 언어가 고유 언어에 해당됩니다.

프로그래밍 언어가 기계어가 진행되는 과정, 실행되는 프로세스 각각의 언어는 단순히 관계가 제한되어 있지만 해당 언어가 컴퓨터를 알아들을 수 있음 0101과 같은 기계어 변역하는 프로세스 주체가 다른 경우에도 존재한다.대표적으로 언어 와 인터프리터 언어로 인해 문제가 발생하면 또 VM위에 돌아가는 언어와 그렇지 않은 언어 구조가 있다고 합니다. 우선 프로그래밍 언어는 어떻게 기계어가 되는 것인지?컴퓨터는 프로그래밍 언어를 알지 못했습니다. 01010과 같은 기계어만 아는 것입니다.0000101011101100011101101 머 이런 0과1의 조합이 있기 때문에 면 이것을 설명하는 것인데그럼 컴퓨터가 알아듣기를 원하면 결국 0과 1의 대신으로 컴퓨터에게 필요근데 이렇면 우리와 같은 범인들을 ..0101 프로그래밍로이라니..그래서 개발된 것이 어셈블리 언어이다.어셈블리는 기계어와 1대1 관계되는 프로그래밍 언어로예를 들어 기계어 0101 메모리를 세기는 것으로 컴퓨터가 이해하는 것 외에 MOV 로 표현하자 ~ 이런 식으로 인간들끼리 규칙을 정한 것입니다0101 0010 1 이런식으로 표현하자 규칙을 정했다. (임의로 만든 규칙입니다) 그런면MOV exa 1 다음과 같이 우리가 어셈블리어 코딩을 하는 것입니다.그렇면 이제 결합 기계로 변환야 컴퓨터가 이해할 수 있도록 1대1 반응이 다시 기계로 이루어지도록 합니다.그럼 어셈블리어 조합표를 보고 인간 이 부분야 하는가?똑똑하신 분들이 이렇게 MOV라는 텍스트가 왔던 경우 0101로 해서 제도 프로그램을 이미 만들어 두었다(처음 이 프로그램은 0101로 한땀한땀을 만들었을 것입니다)그래서 MOV exa 1이라는 텍스트를 일고 0010 1로 다시 얻을 것입니다 받는 "어셈블러" 프로그램을 처리하는 우리는 어셈블리어 코딩할 수 있는 것입니다. 기억에 남는 문장을 만들어 보세요.그냥 메모장에 안녕하세요.적나라메모장에 C++/Java/Python 코드 등이 감시하는 그런 면 파일명에 main.cpp, main.java, main.py와 같이 뒤쫓는 것은 cpp, java, py는 뭐죠? 이건만 사람이 이해하기 쉽게 하려고 합니다. 장식 확장자이다, cpp 붙였다고 묶어마한 파일이 아니라 메모장으로 열면 코드 C++가 장식있는 데메인 (참고로 내용은 CPP로 작성되었습니다.).txt 대신main.cpp이게 더 이해하기 쉽다는 사실입니다.. 그렇게 하는 것입니다. 이럼 이런 종류의 텍스트 파일이 프로그램으로 어떻게 할 것인지는? -> 링커 -> exe 파일 나옴! 여기서 전처리된 코드가 분리되기 전에 처리해야 할 내용을 처리하여(include, 정의 같은 것) 우리가 만든 코드 자체를 수정해 저장.그럼 이제 처리된 코드가 분리에 참여어 기계를 사용하지 마십시오. 이 과정을 보내고이 과정을 처리하도록 "프로그램"을 보내드립니다. 즉, 오류도 프로그램이고 C++ 규칙에 경고를 알리는 해석을 처리하는 방법입니다. 해당 과정을 거치면 우리가 만든 C++가 기계 에어로 변이되어 기계 에어로 되어있는 목적 파일이라는 코드가 존재합니다. 그러나 목적 파일은 0101로 처리해야 하는 컴퓨터가 실행하는 수가 없습니다.그이유를 간단히 설명하기 위한 목적 코드에 적힌 내용 은 [화면에 "Hello World"를 출력하시오] 있는 내용이 기계적으로 변역된 것입니다. 그러나 해당 내용이 기계적으로 변역하고 이해하는 것은 하찮습니다.. 문제는 컴퓨터가 출력한다는 것이 어떻게 인지할 수 없는 것입니다. 들은 이랑 한글로 인사하는 것을 좋아하는 통하는 상대가 아닌것처럼. 기계어지만 능력은 없는 상황입니다. 그러나 컴퓨터에 어떻게 출력하도록 사용자가 충분히 또 이미 똑똑한 것 같습니까? 이미 다 만든 출력아~ 출력은 이렇게 되므로 미리 준비할 파일이 존재하고 우리가 만든 기계어에서 "출력" 부분을 이 클래스와 연결(link)하여 출력하는 방법까지 알고 있는 기계 에어로 된 파일이 실행 파일 (.exe) 이고 이것이 우리가 만드는라는 "프로그램" 이 되는 것고 클래스와 연결하는 "프로그램" 이 링커가 프로그래밍 언어가 기본적으로 프로그램이 있다는 것입니다. JAVA와 동일한 경우의 기본적으로 프로세스를 구성하지만 컴퓨팅 파일을 만들고자 목적 코드가 아닌 바이트 코드라는 것이 있다는 것입니다.C++과 동일한 경우 C++로 만든 프로그램은 해당합니다. 로그에 CPU가 생성되어 OS가 실행중입니다. 즉, 만든 프로그램은 실행 가능한 것이 아닙니다. (exe 파일은 그냥 사용자에서 실킬 할 수 없음) 따라서 사용자에서 반환하는 프로그램을 만드는 위의 20대에서 뒤로 하도록 과 링킹 처리를 또 처리해야 하는 데이게 될 정도라이브러리가 다르거나 하는 문제 때문에 C++ 코드를 변경해야 일이 새로워지고 생각지도 않고 동작하지 않을 수도 있다.JAVA는 한 번만 실행하면 모든 곳에서 작동하는 것을 모토로아ㅡㅡ 한번 만들어 됫지 또 만들어야 해? 다 그냥 돌려게 하자!라고 생각하여 각각의 사람들에 대해 재미있는 가상머신이라는 프로그램을 만들고 그 위에 우리 프로그램이 백업되도록 해버리면가상머신은 JAVA 개발자들이 만들어주고 JAVA를 사용하는 개발자는 OS 신경쓰지말고 프로그래밍하는 것입니다. 존재합니다. 바이트 코드 역시 [화면에 "Hello World"를 출력하시오] 와 같은 내용을 무조건 JAVA와 같이 VM (가상머신)을 사용하는 언어는 여기 링커가 라이브러리와 연결하여 exe파일이 시작되는 것이 아니죠. 바이트 코드를 로드서 프로그램을 실행하여 "프로그램"이라는 가상 머신을 생성하면 가상 머신이 다시 바이트 코드를 이해하기 위해 생성됩니다. 실행으로 가는 것입니다.이렇게 하면 프로그램이 실행하는 한 단계가 더 잘하는 것인데이로인하여 JAVA는 C/C++ 과같은 언어보다 연결되는 프로그램에 반대게 됩니다. (따라서 속도에 대한 프로그램은 C/C++로 프로그래밍 됩니다)하지만 코딩하지 않는 C++ 코드가 잘 짜여진 JAVA보다이어야 동작할 수 있을 것입니다... 개발자는 반대지 에너지쓰지말고 개발하거나 옳습니다.Python의 경우 리터프리터(통역사 ) 언어이다아예스트럭처가 다른데 지금은 제외하고 프로그램을 처리하는 동안에 보관하고 있는 프로그램을 처리하고 있습니다. 통역사는 모름지기 때문에 설명해야 하는 법.인터프리터는 한줄 한줄 읽어서 그때 그때 기능을 수행한다. 중요한 리터프리터만을 위해, 링커처럼 "프로그램"이다. 즉석의 끌어쓰기의 언어 규칙을 해설할 수 있도록 도와주는 포터는 " 프로그램"을 다운받으면 그 인터프리터 프로그램을 작동할 수 있는 섀시 코드를 한줄씩 입력할 수 있는 인터프리터를 볼 수 있습니까? 해석하여 컴퓨터에게 위치는 것입니다.이해하기 쉽게 편안한 휴식을 취하는 것은 리터프리터라는 프로그램으로 돌아가고 할 수 있습니다.

프로그래밍을 만드는 거 영상: https://www.youtube.com/watch?v=f73JA4vIOFo

번역기

!pip install googletrans==4.0.0-rc1

import googletrans

# 2. 번역기 객체를 생성합니다.
translator = googletrans.Translator()

# 3. 번역할 단어를 정합니다.
inStr = str(input("번역할거"))

# 4. 라이브러리를 사용하여 번역합니다.
outStr = translator.translate(inStr, dest = 'en', src = 'auto')

# 5. 결과를 출력합니다.
print(f"{inStr} => {outStr.text}")

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
a,b= map(str,input().split(","))
search_string = "출력"

if a.find(search_string) != -1:
    print(b)
else:
    print("검색 문자열이 메인 문자열에 포함되어 있지 않습니다.")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
print("코드를 입력하세요")
while True:
    lines = input().split(",")

    # 리스트의 각 요소를 연결하여 하나의 문자열로 만듭니다.
    joined_lines = ",".join(lines)

    if joined_lines.find("출력") != -1:
        print(lines[1])
    else:
        print("검색 문자열이 메인 문자열에 포함되어 있지 않습니다.")
