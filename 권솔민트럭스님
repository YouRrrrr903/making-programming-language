인터프리터 = 코드를 한줄씩 읽어가며 실행
: Javascript, Python...
  -> 실핼 속도 상대적 느림 
  -> 코드 문제 생기면 바로바로 수정 가능 (컴파일러와 디버그 방식에 차이)

컴파일러 = 코드 전체를 읽어 기계어로 번역
: C, C++, Java...

본론
인터프리터 언어를 만들자
컴파일 언어는 컴파일러도 컴파일 언어로 만들어야 해서 보다 세밀한 설계가 필요
반면 인터프리터 언어들은 다른 컴파일 언어로도 구현 가능
실행 속도는 느려도 언어는 프로그래밍 수정이 간단함
!인터프리터 언어의 설계가 압도적으로 쉽다!

대규모 프로그램이나 복잡한 연산을 수행할 때는 성능 저하가 발생할 수 있지만
우리가 만들 프로젝트는 그정도로 방대하지 않음
 소스 코드가 그대로 노출 -> 보안에 취약하지만 우리 코드가 그정도로 중요하지 않음.....

https://ichi.pro/ko/python-eulo-jasin-man-ui-peulogeulaeming-eon-eo-mandeulgi-151029490829060

09/26
오늘 브랜치 생성함! https://ddongyeop.tistory.com/16
브랜치 만들기>아무파일 하나 만들기>패치>>>>>>



# 사용자 입력을 받습니다.
input_string = input("입력: ")

# "출력"과 "더하기"가 포함되어 있는지 확인합니다.
if "출력" in input_string:
    if "더하기" in input_string:
        # "더하기"를 기준으로 문자열을 나누고, 숫자 추출
        parts = input_string.split("더하기")
        numbers = []

        for part in parts:
            # 각 부분에서 숫자를 추출하고 공백을 제거하여 리스트에 추가
            num = part.strip()
            if num.isdigit():  # 숫자인지 확인
                numbers.append(int(num))
            else:
                # 숫자가 아닐 경우, 숫자와 관련된 문자열에서 숫자만 추출
                try:
                    # 첫 번째 숫자만 추출
                    number = int(num.split()[0])
                    numbers.append(number)
                except (ValueError, IndexError):
                    continue  # 변환이 실패하면 넘어감

        if numbers:
            # 모든 숫자를 더하기
            result = 0
            for number in numbers:
                result += number
            print(result)
        else:
            print("유효한 숫자를 입력해야 합니다.")
    else:
        print("더하기 연산이 포함되어 있지 않습니다.")
else:
    print("출력이라는 단어가 포함되어 있지 않습니다.")
