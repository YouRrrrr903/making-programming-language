인터프리터 = 코드를 한줄씩 읽어가며 실행
: Javascript, Python...
  -> 실핼 속도 상대적 느림 
  -> 코드 문제 생기면 바로바로 수정 가능 (컴파일러와 디버그 방식에 차이)

컴파일러 = 코드 전체를 읽어 기계어로 번역
: C, C++, Java...

본론
인터프리터 언어를 만들자
컴파일 언어는 컴파일러도 컴파일 언어로 만들어야 해서 보다 세밀한 설계가 필요
반면 인터프리터 언어들은 다른 컴파일 언어로도 구현 가능
실행 속도는 느려도 언어는 프로그래밍 수정이 간단함
!인터프리터 언어의 설계가 압도적으로 쉽다!

대규모 프로그램이나 복잡한 연산을 수행할 때는 성능 저하가 발생할 수 있지만
우리가 만들 프로젝트는 그정도로 방대하지 않음
 소스 코드가 그대로 노출 -> 보안에 취약하지만 우리 코드가 그정도로 중요하지 않음.....

https://ichi.pro/ko/python-eulo-jasin-man-ui-peulogeulaeming-eon-eo-mandeulgi-151029490829060

09/26
오늘 브랜치 생성함! https://ddongyeop.tistory.com/16
브랜치 만들기>아무파일 하나 만들기>패치>>>>>>



def transpile(lines):
    python_lines = []  # 변환된 파이썬 코드를 저장할 리스트
    for line in lines:
        stripped_line = line.strip()  # 앞뒤 공백 제거

        if stripped_line.startswith('#'):
            continue  # 주석은 무시

        elif stripped_line.startswith('set '):
            # 'set x = 10' 형식으로 변환
            python_line = stripped_line[4:].replace('=', '=')  # '='을 파이썬의 변수 할당으로 변환
            python_lines.append(python_line)

        elif stripped_line.startswith('print '):
            # 'print x plus y'를 'print(x + y)' 형식으로 변환
            expression = stripped_line[6:]  # 'print ' 이후의 표현식
            # 사용자 정의 연산자 처리
            expression = expression.replace('plus', '+').replace('minus', '-')
            python_line = f"print({expression})"
            python_lines.append(python_line)

        else:
            continue  # 알 수 없는 명령어는 무시
    return '\n'.join(python_lines)

def execute_python_code(python_code):
    exec(python_code)

# 새로운 언어 코드 예시
code_lines = [
    "# 변수에 값 할당",
    "set x = 10",
    "set y = 20",
    "",
    "# x와 y의 합을 출력",
    "print x plus y",  # plus 연산자 사용
    "# x에서 y를 뺀 결과 출력",
    "print x minus y"  # minus 연산자 사용
]

python_code = transpile(code_lines)  # 새로운 언어 코드를 파이썬 코드로 변환
print("파이썬 코드:")
print(python_code)  # 변환된 파이썬 코드 출력

print("실행 결과:")
execute_python_code(python_code)  # 변환된 파이썬 코드를 실행
